/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/* @define dc-accordion */

.dc-accordion__wrapper {
    /* postcss-bem-linter: ignore */
}

.dc-accordion__wrapper>div:last-child {
    border-bottom-right-radius: 4px;
    border-bottom-left-radius: 4px;
    border-bottom-width: 1px;
}

.dc-accordion__item {
    border: 1px solid var(--general-section-1);
    border-bottom-width: 0;
    color: var(--text-general);
    font-size: 1.4rem;
}

.dc-accordion__item--first {
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
}

.dc-accordion__item--open .dc-accordion__item-header {
    border-bottom: 1px solid var(--general-section-1);
}

.dc-accordion__item--open .dc-accordion__item-content {
    display: block;
}

.dc-accordion__item--close .dc-accordion__item-content {
    display: none;
}

.dc-accordion__item-header {
    cursor: pointer;
    line-height: 1.43;
    padding: 8px 16px;
}

.dc-accordion__item-header-icon {
    vertical-align: middle;
    /* postcss-bem-linter: ignore */
}

.dc-accordion__item-header-icon-wrapper {
    float: right;
    padding-left: 16px;
}

.dc-accordion__item-header-icon path,
.dc-accordion__item-header-icon rect {
    fill: var(--text-general);
}

.dc-accordion__item-content {
    padding: 16px;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.amount-input-wrapper {
    display: flex;
    flex-direction: column;
    padding: 0.8rem;
    height: auto;
}

.amount-input-container {
    position: relative;
    height: 2.8rem;
}

.amount-input-container .dc-input__field {
    color: var(--text-general);
}

.amount-input-container--error .dc-input__field {
    color: var(--text-loss-danger);
    -webkit-text-fill-color: var(--text-loss-danger);
}

.amount-input-container--disabled .dc-input__field {
    color: var(--text-disabled-1);
}

@media (min-width: 320px) and (max-width: 767px) {
    .amount-input-container {
        height: 2.4rem;
    }
}

.amount-input {
    position: absolute;
    border: none;
    flex: 1;
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
}

.amount-input input {
    font-size: var(--text-size-sm);
    font-weight: var(--text-weight-bold);
}

@media (min-width: 320px) and (max-width: 767px) {
    .amount-input input {
        font-size: var(--text-size-s);
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-autocomplete {
    width: 100%;
    position: relative;
}

.dc-autocomplete__trailing-icon {
    position: absolute;
    right: 0;
    pointer-events: none;
    margin-right: 1.1rem;
    cursor: text;
    transition: transform 0.2s ease;
    transform: rotate(0deg);
    transform-origin: 50% 45%;
}

.dc-autocomplete__trailing-icon--opened {
    transform: rotate(-180deg);
}

.dc-autocomplete__trailing-icon--disabled {
    --fill-color1: var(--text-less-prominent) !important;
}

.dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--text-less-prominent);
}

.dc-autocomplete .dc-input {
    margin-bottom: 0;
}

.dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--text-loss-danger);
}

.dc-autocomplete .dc-input__field {
    white-space: nowrap;
    text-overflow: ellipsis;
}

.dc-autocomplete .dc-dropdown-list {
    box-shadow: 0 8px 16px 0 var(--shadow-menu);
    background: var(--general-main-2);
}

.dc-autocomplete:focus,
.dc-autocomplete[focus-within],
.dc-autocomplete:active {
    outline: 0;
}

.dc-autocomplete:focus,
.dc-autocomplete:focus-within,
.dc-autocomplete:active {
    outline: 0;
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--brand-secondary);
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill,
.dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
    fill: var(--brand-secondary);
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-btn {
    text-transform: none !important;
}

.dc-btn {
    vertical-align: middle;
    align-items: center;
    justify-content: center;
    touch-action: manipulation;
    cursor: pointer;
    white-space: nowrap;
    padding: 0 1.6rem;
    display: inline-flex;
    border: 0;
    height: 3.2rem;
    border-radius: 4px;
    transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
    outline: 0;
    position: relative;
    text-decoration: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
    /*
   * Text will be transformed to sentence case in JS
   * text-transform is declared in .dc-btn instead of .dc-btn__text
   * to ensure consistency (even for children) as per styleguide
   */
    /* TODO: confirm this button with designer are we still using this? */
    /* TODO: confirm this button with designer are we still using this? */
    /* postcss-bem-linter: ignore */
}

.dc-btn__toggle {
    height: auto;
    padding: 0.8rem 2.5rem;
}

.dc-btn__text,
.dc-btn__icon {
    display: flex;
    pointer-events: none;
}

.dc-btn__icon {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: inherit;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
    padding-right: 0.8rem;
    pointer-events: none;
}

.dc-btn__icon--circle {
    padding-right: 0;
}

.dc-btn:not([disabled]):hover {
    text-decoration: none;
}

.dc-btn__rounded {
    border-radius: 24px;
}

.dc-btn--plus {
    height: 2.4rem !important;
    border: 1px solid var(--border-hover) !important;
    padding: 0 !important;
}

.dc-btn--plus {
    width: 2.4rem;
    background: inherit;
    background-repeat: no-repeat;
    background-position: center;
}

.dc-btn--circle {
    width: 3.2rem !important;
}

.dc-btn--circle {
    height: 3.2rem;
    border-radius: 50%;
}

.dc-btn--circular {
    border-radius: 100px;
}

.dc-btn--transparent {
    background: transparent;
}

.dc-btn--primary {
    background: var(--button-primary-default);
    color: var(--text-colored-background);
}

.dc-btn--primary:hover:not([disabled]) {
    background: var(--button-primary-hover);
}

.dc-btn--primary:active:not([disabled]) {
    background: var(--button-primary-default);
}

.dc-btn--primary:disabled,
.dc-btn--primary[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--primary:disabled,
.dc-btn--primary[disabled] {
    opacity: 0.32;
}

.dc-btn--primary .dc-btn__text,
.dc-btn--primary .dc-btn__icon {
    color: var(--text-colored-background);
}

.dc-btn--primary__light {
    background: var(--button-primary-light-default);
}

.dc-btn--primary__light:hover:not([disabled]) {
    background: var(--button-primary-light-hover);
}

.dc-btn--primary__light:active:not([disabled]) {
    background: var(--button-primary-light-default);
}

.dc-btn--primary__light:disabled,
.dc-btn--primary__light[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--primary__light:disabled,
.dc-btn--primary__light[disabled] {
    opacity: 0.32;
}

.dc-btn--primary__light .dc-btn__text,
.dc-btn--primary__light .dc-btn__icon {
    color: var(--brand-red-coral);
}

.dc-btn--secondary {
    background: transparent;
    border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:hover:not([disabled]) {
    background: var(--button-secondary-hover);
}

.dc-btn--secondary:active:not([disabled]) {
    border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:disabled,
.dc-btn--secondary[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--secondary:disabled,
.dc-btn--secondary[disabled] {
    opacity: 0.32;
}

.dc-btn--secondary .dc-btn__text,
.dc-btn--secondary .dc-btn__icon {
    color: var(--text-prominent);
}

.dc-btn--tertiary {
    background: var(--button-tertiary-default);
}

.dc-btn--tertiary:hover:not([disabled]) {
    background: var(--button-tertiary-hover);
}

.dc-btn--tertiary:active:not([disabled]) {
    background: var(--button-tertiary-default);
}

.dc-btn--tertiary .dc-btn__text,
.dc-btn--tertiary .dc-btn__icon {
    color: var(--brand-red-coral);
}

.dc-btn--tertiary:disabled,
.dc-btn--tertiary[disabled] {
    cursor: not-allowed !important;
}

.dc-btn--tertiary:disabled,
.dc-btn--tertiary[disabled] {
    opacity: 0.32;
}

.dc-btn--alternate {
    background: var(--button-tertiary-default);
    border: 2px solid var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) {
    background: var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
    color: var(--text-colored-background);
}

.dc-btn--alternate .dc-btn__text,
.dc-btn--alternate .dc-btn__icon {
    color: var(--brand-red-coral);
}

.dc-btn--green {
    background: var(--status-success);
}

.dc-btn--green:hover:not([disabled]) {
    background: var(--transparent-success);
}

.dc-btn--green:active:not([disabled]) {
    background: var(--status-success);
}

.dc-btn--green .dc-btn__text,
.dc-btn--green .dc-btn__icon {
    color: var(--text-colored-background);
}

.dc-btn__small {
    height: 2.4rem;
    min-width: 4.8rem;
    border-width: 1px;
}

.dc-btn__small .dc-btn__text {
    font-size: 1.2rem;
}

.dc-btn__medium {
    height: 3.2rem;
    min-width: 5.6rem;
    border-width: 1px;
}

.dc-btn__medium .dc-btn__text {
    font-size: 1.4rem;
}

.dc-btn__large {
    height: 4rem;
    min-width: 6.4rem;
    border-width: 2px;
}

.dc-btn__large .dc-btn__text {
    font-size: 1.4rem;
}

.dc-btn__wide {
    width: 100%;
    height: 4rem;
}

.dc-btn__effect:focus:not(:active):after {
    content: "";
    position: absolute;
    top: -0.1em;
    left: -0.1em;
    bottom: -0.1em;
    right: -0.1em;
    border-radius: inherit;
    border: 0 solid var(--brand-secondary);
    opacity: 0.4;
    animation: buttonEffect 0.4s;
    animation-fill-mode: forwards;
    display: block;
}

.dc-btn__group {
    white-space: nowrap;
}

.dc-btn__group .dc-btn+.dc-btn {
    margin-left: 8px;
}

.dc-btn__button-group {
    border-radius: 0 4px 4px 0;
}

.dc-btn .initial-loader--btn {
    background-color: transparent;
    background-color: initial;
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
    background-color: var(--text-colored-background);
}

.dc-btn .initial-loader--btn .barspinner {
    margin: 0.6rem 4px 0 -4px;
    /* postcss-bem-linter: ignore */
}

.dc-btn .initial-loader--btn .barspinner__rect {
    height: 35%;
}

@keyframes buttonEffect {
    to {
        opacity: 0;
        top: -0.6em;
        left: -0.6em;
        bottom: -0.6em;
        right: -0.6em;
        border-width: 6px;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-badge {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    color: #ffffff;
}

.dc-badge--contained {
    border: none;
}

.dc-badge--bordered {
    border: 1px solid var(--text-prominent);
    color: var(--text-prominent);
}

.dc-badge--blue {
    background-color: #377cfc;
}

.dc-badge--orange {
    background-color: #ff6444;
}

.dc-badge--red {
    background-color: #003366;
}

.dc-badge--gray {
    background-color: #d6dadb;
}

.dc-badge--full-rounded {
    border-radius: 2px;
}

.dc-badge--two-rounded {
    border-bottom-left-radius: 8px;
    border-top-right-radius: 8px;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-button-menu */

.dc-button-menu {
    display: flex;
    justify-content: center;
    width: 100%;
    position: relative;
}

.dc-button-menu__button:first-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

.dc-button-menu__button:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

.dc-button-menu__button {
    margin: 0;
    border: none;
    border-radius: 0px;
    width: 50%;
    background-color: var(--state-normal);
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-button-menu__button .dc-btn__text {
    display: contents;
}

@media (min-width: 1024px) {
    .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
        background-color: var(--state-hover) !important;
    }
}

.dc-button-menu__button span {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: inherit;
    text-align: left;
    line-height: 1.5;
    color: var(--text-general);
}

.dc-button-menu__button--active {
    background-color: var(--state-active) !important;
}

.dc-button-menu__button--active {
    cursor: auto;
    cursor: initial;
}

.dc-button-menu__button--active span {
    font-size: 1.4rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: inherit;
    text-align: left;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-button-menu__toggle {
    margin: 0;
    border: none;
    border-radius: 6px;
    width: 50%;
    background-color: var(--general-section-1);
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-button-menu__toggle .dc-btn__text {
    display: contents;
}

@media (min-width: 1024px) {
    .dc-button-menu__toggle:hover:not(.dc-button-menu__button--active) {
        background-color: var(--state-hover) !important;
    }
}

.dc-button-menu__toggle span {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: inherit;
    text-align: left;
    line-height: 1.5;
    color: var(--text-less-prominent);
}

.dc-button-menu__toggle--active {
    background-color: var(--state-normal) !important;
}

.dc-button-menu__toggle--active {
    cursor: auto;
    cursor: initial;
}

.dc-button-menu__toggle--active span {
    font-size: 1.4rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: inherit;
    text-align: left;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-button-menu__counter {
    margin-left: 0.4rem;
}

.dc-button-menu__wrapper {
    position: relative;
    border-radius: 4px;
    width: 100%;
    background-color: var(--state-normal);
    display: flex;
}

.dc-button-menu__wrapper .dc-button-menu__button,
.dc-button-menu__wrapper .dc-button-menu__button--active {
    background-color: rgba(0, 0, 0, 0) !important;
}

.dc-button-menu__wrapper .dc-button-menu__button,
.dc-button-menu__wrapper .dc-button-menu__button--active {
    z-index: 1;
    padding: 0.8rem 0.6rem;
    white-space: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text,
.dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
    line-height: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

.dc-button-menu--highlight {
    display: block;
    position: absolute;
    content: "";
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
    transition: transform 0.25s ease;
    pointer-events: none;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-calendar */

.dc-calendar {
    outline: 0;
    border-radius: 5px;
    z-index: 999;
    box-sizing: border-box;
    font-size: 1rem;
    background: var(--general-main-2);
    box-shadow: 0 2px 8px 0 var(--shadow-menu);
}

.dc-calendar__header,
.dc-calendar__footer {
    position: relative;
    display: flex;
    align-items: center;
    height: 5rem;
    border-radius: 5px;
    padding: 1.6rem;
    box-sizing: border-box;
}

.dc-calendar__header {
    justify-content: center;
}

.dc-calendar__footer :last-child:not(:only-child),
.dc-calendar__footer .dc-calendar__btn--today {
    margin-left: auto;
}

.dc-calendar__body {
    border-top: 0.1rem solid var(--general-section-2);
    border-bottom: 0.1rem solid var(--general-section-2);
}

.dc-calendar__body--date,
.dc-calendar__body--month,
.dc-calendar__body--year,
.dc-calendar__body--decade {
    display: grid;
    grid-gap: 1.2rem;
    padding: 0.8rem 2rem;
}

.dc-calendar__body--date .dc-calendar__cell,
.dc-calendar__body--month .dc-calendar__cell,
.dc-calendar__body--year .dc-calendar__cell,
.dc-calendar__body--decade .dc-calendar__cell {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 5px;
}

.dc-calendar__body--date {
    grid-template-columns: repeat(7, 2.4rem);
    grid-auto-rows: 2.4rem;
}

.dc-calendar__body--date .dc-calendar__cell {
    width: 100%;
    height: 100%;
}

.dc-calendar__body--month,
.dc-calendar__body--year,
.dc-calendar__body--decade {
    grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
    grid-auto-rows: minmax(4.2rem, auto);
}

.dc-calendar__body--month .dc-calendar__cell,
.dc-calendar__body--year .dc-calendar__cell,
.dc-calendar__body--decade .dc-calendar__cell {
    width: 5.6rem;
    height: 3.2rem;
}

.dc-calendar__body--month .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled),
.dc-calendar__body--year .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled),
.dc-calendar__body--decade .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled) {
    color: var(--text-general);
}

.dc-calendar__body--decade .dc-calendar__cell {
    width: 100%;
}

.dc-calendar__icon {
    cursor: pointer;
    right: 5%;
}

.dc-calendar__icon--today:hover {
    cursor: pointer;
}

.dc-calendar__btn {
    text-align: center;
    padding: 0 0.2rem;
    font-weight: bold;
    cursor: pointer;
    border: none;
    outline: none;
    background: none;
}

.dc-calendar__btn--disabled {
    cursor: default;
    transition: none;
}

.dc-calendar__btn--disabled .dc-calendar__icon {
    cursor: default;
}

.dc-calendar__btn--is-hidden {
    display: none;
}

.dc-calendar__btn--select {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-calendar__btn--prev-year,
.dc-calendar__btn--next-year,
.dc-calendar__btn--prev-month,
.dc-calendar__btn--next-month {
    position: absolute;
    padding: 0 0.5em;
    height: 1.4em;
}

.dc-calendar__btn--prev-year {
    left: 7%;
}

.dc-calendar__btn--next-year {
    right: 7%;
}

.dc-calendar__btn--prev-month {
    left: 14%;
}

.dc-calendar__btn--next-month {
    right: 14%;
}

.dc-calendar__cell {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.25;
    align-self: center;
    justify-self: center;
    position: relative;
    cursor: pointer;
    color: var(--text-general);
    box-sizing: border-box;
}

.dc-calendar__cell--hover {
    color: var(--text-general);
    background: var(--state-hover);
}

.dc-calendar__cell:nth-child(7n):before {
    padding: 0;
    border-radius: 4px;
}

.dc-calendar__cell:nth-child(7n+1):before {
    left: 0;
    border-radius: 4px;
}

.dc-calendar__cell:nth-child(7n+1):after {
    content: none;
}

.dc-calendar__cell--bold {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    color: var(--text-prominent);
}

.dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between),
.dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--between) {
    color: var(--text-disabled);
    transition: none;
    cursor: default;
}

.dc-calendar__cell--is-hidden {
    display: none;
}

.dc-calendar__cell--today {
    font-weight: bold;
    color: var(--text-prominent);
    border: 1px solid var(--state-active);
}

.dc-calendar__cell--today-duration {
    background: var(--state-active);
}

.dc-calendar__cell--active {
    font-weight: bold;
    color: var(--text-prominent);
    background: var(--state-active);
}

.dc-calendar__cell--active:hover {
    background: var(--state-active);
}

.dc-calendar__cell--active-duration {
    background: var(--state-active);
}

.dc-calendar__cell--active-duration:after {
    position: absolute;
    content: "";
    width: 100%;
    top: 0;
    right: 50%;
    z-index: -1;
    height: 100%;
    padding-left: 1rem;
    background: var(--state-active);
}

.dc-calendar__cell--between {
    font-weight: bold;
    color: var(--text-prominent);
    background: var(--state-active);
}

.dc-calendar__cell--between-hover:before {
    position: absolute;
    content: "";
    width: 100%;
    z-index: -2;
    height: 100%;
    padding-left: 3.2rem;
    background: var(--state-hover);
}

.dc-calendar__cell--between:hover {
    background: var(--state-active);
}

.dc-calendar__cell--between:before {
    position: absolute;
    content: "";
    width: 100%;
    z-index: -1;
    height: 100%;
    padding-left: 3.2rem;
    background: var(--state-active);
}

.dc-calendar__cell-tooltip {
    position: absolute;
    display: inline-grid;
    cursor: pointer;
    height: 0;
    top: 0;
    left: 0;
    justify-content: center;
    width: 100%;
}

.dc-calendar__cell-tooltip-icon {
    margin-top: 0.1rem;
    display: inherit;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-card {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    border: 1px solid var(--border-normal);
    padding: 1.6rem;
    border-radius: 4px;
}

.dc-card__wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: auto;
    margin: 1.6rem;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.app-icon {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    overflow: hidden;
}

.app-icon__top-icon {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
}

.app-icon__bottom-icon {
    position: absolute;
    bottom: 0;
    right: 0;
}

.app-icon--small {
    width: 4rem;
    height: 2.4rem;
}

.app-icon--small .app-icon__top-icon {
    top: 0.1rem;
    left: 0.1rem;
}

.app-icon--small .app-icon__bottom-icon {
    bottom: 0.1rem;
    right: 0.1rem;
}

.app-icon--medium {
    width: 6.4rem;
    height: 4rem;
}

.app-icon--medium .app-icon__top-icon {
    top: 0.2rem;
    left: 0.2rem;
}

.app-icon--medium .app-icon__bottom-icon {
    bottom: 0.2rem;
    right: 0.2rem;
}

.app-icon--large {
    width: 12.8rem;
    height: 8rem;
}

.app-icon--large .app-icon__top-icon {
    top: 0.4rem;
    left: 0.4rem;
}

.app-icon--large .app-icon__bottom-icon {
    bottom: 0.4rem;
    right: 0.4rem;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.endpoint {
    width: 30vw;
    min-width: 30rem;
    margin: 20vh auto;
}

@media (min-width: 320px) and (max-width: 767px) {
    .endpoint {
        margin: auto;
    }
}

.endpoint__title {
    margin-bottom: 1.6rem;
}

.endpoint__checkbox {
    margin-top: 4.5rem;
    margin-bottom: 1.6rem;
}

.endpoint .dc-btn--secondary {
    margin-left: 1.6rem;
}

.endpoint .feature-flags {
    margin-top: 4rem;
}

.endpoint .feature-flags__item {
    margin-top: 1.6rem;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.apollo_info {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-right: 20px;
}

.logo_holder {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    align-items: center;
    font-size: 12px;
    cursor: pointer;
    text-decoration: none;
}

.logo_image {
    width: 32px;
    height: 32px;
    background-image: url(/public/images/favicons/favicon-32.png);
    margin-left: 12px;
    background-size: cover;
}

.social_acc {
    font-size: 28px;
    color: #60b5ff;
    cursor: pointer;
}

/* Responsive (Mobile) */

@media (max-width: 720px) {
    .apollo_info {
        width: 100%;
        justify-content: center;
        gap: 2rem;
    }
    .social_acc {
        font-size: 38px;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.cashier__counter {
    position: absolute;
    top: 0.4rem;
    right: -1.5rem;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.acc-switcher-wallet-item__container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.35rem 1.6rem;
    border-radius: 4px;
    gap: 1.6rem;
    cursor: pointer;
}

.acc-switcher-wallet-item__container--active {
    background-color: var(--general-active);
}

.acc-switcher-wallet-item__container:hover:not(.acc-switcher-wallet-item__container--active) {
    background-color: var(--general-hover);
}

.acc-switcher-wallet-item__content {
    display: flex;
    flex-direction: column;
    width: 100%;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.account-switcher-wallet-list {
    padding: 0.4rem 0.8rem;
    border-bottom: 1px solid var(--general-hover);
}

@media (min-width: 320px) and (max-width: 767px) {
    .account-switcher-wallet-list {
        padding: 0;
        overflow: auto;
        border-bottom: 0;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.account-switcher-wallet {
    display: flex;
    flex-flow: column nowrap;
}

.account-switcher-wallet__header {
    padding: 1rem;
    border-bottom: 1px solid var(--general-hover);
}

.account-switcher-wallet__list {
    padding: 0.4rem 0.8rem;
    border-bottom: 1px solid var(--general-hover);
}

.account-switcher-wallet__looking-for-cfds {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.6rem;
}

.account-switcher-wallet__arrow {
    transform: rotate(-90deg);
    cursor: pointer;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.account-switcher-wallet-mobile {
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: space-between;
}

.account-switcher-wallet-mobile__button {
    margin: 1rem 1.6rem;
}

.account-switcher-wallet-mobile__footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 5.6rem;
    border-top: 1px solid var(--general-hover);
    padding: 0 1.6rem;
    cursor: pointer;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.currency-list {
    width: 100%;
}

.currency-list form {
    width: 100%;
}

.currency-list__items {
    display: flex;
    flex-wrap: wrap;
    width: 768px;
    margin: auto;
}

.currency-list__items__center {
    justify-content: center !important;
}

@media (min-width: 1024px) {
    .currency-list__items {
        justify-content: flex-start;
    }
}

@media (min-width: 320px) and (max-width: 767px) {
    .currency-list__items {
        display: grid;
        grid-template-columns: 1fr 1fr;
        justify-items: center;
        width: 100%;
    }
}

.currency-list__item {
    align-items: center;
    border-radius: 8px;
    display: inline-flex;
    flex-direction: column;
    height: 128px;
    width: 160px;
    justify-content: space-around;
    margin: 1.6rem 1.6rem 0;
    min-width: 128px;
}

.currency-list__item:hover:not(.currency-list__item--selected) {
    cursor: pointer;
    border: 1px solid var(--border-hover);
}

.currency-list__item--current {
    pointer-events: none;
}

.currency-list__item--current svg {
    opacity: 0.08;
}

.currency-list__item--current .label {
    color: var(--text-disabled);
}

.currency-list__item--selected {
    border: 2px solid var(--border-active);
}

.currency-list__item--selected .label {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: var(--text-prominent);
}

.currency-list__item>div {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
}

.currency-list__item .currency-list__icon {
    height: 48px;
    width: 48px;
    margin-bottom: 1em;
}

@media (min-width: 320px) and (max-width: 767px) {
    .currency-list__item .currency-list__icon {
        height: 64px;
        width: 64px;
        margin-bottom: 0.8rem;
    }
}

.currency-list__item-text {
    text-align: center;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
}

@media (min-width: 320px) and (max-width: 767px) {
    .currency-list__item {
        margin: 1.6rem 2rem 0.8rem;
        padding: 0.8rem 0;
        width: 85%;
        min-width: 0;
        min-width: initial;
    }
}

@media only screen and (min-width: 320px) and (max-width: 767px) and (max-width: 340px) {
    .currency-list__item {
        margin: 1.6rem 1rem 0.8rem;
        width: 136px;
        height: 136px;
    }
}

.currency-list__radio-button {
    display: none;
}

.currency-list__popover {
    position: relative;
    left: 4.8rem;
    top: -4.8rem;
    margin-top: -16px;
}

@media (min-width: 320px) and (max-width: 767px) {
    .currency-list__popover {
        right: 0;
        top: -5.8rem;
    }
}

@media (min-width: 1024px) {
    .currency-list__loading-wrapper {
        min-width: 768px;
    }
}

.currency-hr {
    height: 2px;
    margin: 1.6rem auto;
    width: 90%;
    border-top: 1px solid var(--general-section-1);
}

@media (min-width: 320px) and (max-width: 767px) {
    .currency-hr {
        border-top-width: 2px;
        border-color: var(--border-disabled);
        margin-left: -2.4rem;
        width: calc(100% + 2.4rem);
    }
}

.currency-selector__subheading {
    margin-top: 0.8rem;
}

.currency-selector__radio-group--with-margin--is-header {
    font-size: 1.6rem;
    margin: 0.4rem 0 0;
    font-weight: bold;
    color: var(--text-prominent);
}

@media (min-width: 1024px) {
    .currency-selector__radio-group--with-margin {
        margin-bottom: 0.4rem;
        margin-left: auto;
        margin-right: auto;
        width: 768px;
    }
}

.currency-selector__deposit-warn {
    width: 78%;
    margin: calc(3% - 1rem) auto;
    padding: 10px;
}

.add-currency__title {
    margin-top: 1rem;
}

.add-currency__sub-title {
    margin-top: 0.8rem;
}

.add-currency__underline {
    border-bottom: 1px solid var(--general-section-1);
    width: 55rem;
    margin: 1.6rem auto 0;
}

.add-currency__note {
    background-color: var(--general-section-1);
    width: 55rem;
    margin: 1.1rem auto 1rem;
    padding: 0.5rem;
}

.add-currency__note-wrapper {
    width: 100%;
    display: flex;
    align-self: flex-end;
}

.add-currency__wizard-header {
    margin-top: 1rem;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.currency-selection-modal__header {
    width: 100%;
    position: relative;
    display: inline-flex;
    align-items: center;
    padding: 1.6rem 2.4rem;
    border-bottom: 2px solid var(--general-section-1);
}

.currency-selection-modal__header .close-icon {
    margin-left: auto;
    cursor: pointer;
}

.currency-selection-modal__body {
    display: flex;
    flex-direction: column;
    height: 31.2rem;
    padding: 0.8rem 0.8rem 2.8rem;
    overflow-y: scroll;
}

.currency-selection-modal__body .currency-item-card {
    width: 100%;
    height: 5.4rem;
    display: inline-flex;
    align-items: center;
    padding: 0.8rem 1.6rem;
    border-radius: 4px;
    cursor: pointer;
}

.currency-selection-modal__body .currency-item-card:hover {
    background-color: var(--state-hover);
}

.currency-selection-modal__body .currency-item-card--active {
    background: var(--state-active);
}

.currency-selection-modal__body .currency-item-card__icons {
    margin-right: 1.6rem;
}

.currency-selection-modal__body .currency-item-card__details {
    display: flex;
    flex-direction: column;
}

.currency-selection-modal__body .currency-item-card__balance {
    margin-left: auto;
}

.currency-selection-modal__bottom-controls {
    width: 100%;
    height: 7.2rem;
    position: absolute;
    bottom: 0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1.6rem 2.4rem;
    border-top: 2px solid var(--general-section-1);
    background-color: var(--general-main-1);
    z-index: 4;
}

.currency-selection-modal__bottom-controls .block-button {
    width: 100%;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

@media (min-width: 320px) and (max-width: 767px) {
    .open-real-account-dialog .dc-dialog__dialog {
        max-width: 32rem;
    }
    .open-real-account-dialog .dc-dialog__content {
        font-size: 1.2rem;
    }
    .open-real-account-dialog .dc-dialog__button {
        font-size: 1.2rem;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.ready-to-verify-dialog .dc-dialog__header-wrapper,
.ready-to-verify-dialog .dc-dialog__content,
.ready-to-verify-dialog .dc-dialog__footer {
    display: flex;
    justify-content: center;
    text-align: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .ready-to-verify-dialog .dc-dialog__dialog {
        padding: 1.6rem;
        margin: 0 1.6rem;
    }
}

.ready-to-verify-dialog .dc-dialog__header-wrapper {
    margin-top: 0;
    margin-top: initial;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.mt5-notification-modal-body {
    border-top: 2px solid #f2f3f4;
}

@media (min-width: 320px) and (max-width: 767px) {
    .mt5-notification-modal-description {
        margin: 2rem;
    }
    .mt5-notification-modal-description--button {
        display: flex;
        width: 100%;
    }
    .mt5-notification-modal-description--footer {
        padding: 1rem 1.6rem;
    }
}

.mt5-notification-list {
    list-style: disc;
    margin-top: 0.4rem;
}

.mt5-notification-list-container {
    padding-left: 1.5rem;
    font-size: 1.6rem;
    color: var(--text-general);
}

.mt5-notification-list-contact {
    margin-top: 1rem;
}

.mt5-notification-list__link {
    color: var(--text-red);
    cursor: pointer;
    text-decoration: underline;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.need-real-account-for-cashier-dialog .dc-dialog__header-wrapper {
    margin: 0 0 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .need-real-account-for-cashier-dialog .dc-dialog__content,
    .need-real-account-for-cashier-dialog .dc-dialog__button {
        font-size: 1.2rem;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

@media (min-width: 320px) and (max-width: 767px) {
    .ready-to-deposit-dialog .dc-dialog__content,
    .ready-to-deposit-dialog .dc-dialog__button {
        font-size: 1.2rem;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.devtools__toggle-button {
    background: #003366;
    border: 0px;
    padding: 0px;
    position: fixed;
    z-index: 99999;
    font-size: 1.5em;
    margin: 0.5em;
    cursor: pointer;
    bottom: 0px;
    right: 0px;
    width: 40px;
    height: 40px;
    border-radius: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #fff;
    padding-bottom: 2px;
    font-weight: bold;
    transition: all 0.2s;
}

.devtools__toggle-button:hover {
    scale: 1.1;
}

.devtools__panel {
    font-size: max(12px, min(1.5vw, 14px));
    font-family: sans-serif;
    display: flex;
    background-color: rgb(11, 21, 33);
    color: #fff;
    height: 290px;
    position: fixed;
    direction: ltr;
    bottom: 0px;
    border-top: 1px solid rgb(63, 78, 96);
    transform-origin: center top;
    box-shadow: rgba(0, 0, 0, 0.3) 0px 0px 20px;
    z-index: 100000;
    transition: all 0.2s ease 0s;
    left: 0px;
    width: 100%;
    max-height: 90%;
}

.devtools__panel--open {
    visibility: visible;
    opacity: 1;
    pointer-events: all;
    transform: translateY(0px) scale(1);
}

.devtools__panel--close {
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
    transform: translateY(15px) scale(1.02);
}

.devtools__panel-left {
    flex: 1 1 500px;
    min-height: 40%;
    max-height: 100%;
    overflow: auto;
    border-right: 1px solid rgb(34, 46, 62);
    display: flex;
    flex-direction: column;
}

.devtools__panel-right {
    flex: 1 1 500px;
    display: flex;
    flex-direction: column;
    overflow: auto;
    height: 100%;
}

.devtools__close-button {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    font-size: 0.9em;
    font-weight: bold;
    background: rgb(63, 78, 96);
    border: 0px;
    border-radius: 0.3em;
    color: #fff;
    padding: 0.5em;
    cursor: pointer;
    position: absolute;
    z-index: 99999;
    margin: 0.5em;
    bottom: 0px;
    right: 0px;
}

.devtools__panel-title {
    padding: 0.5em;
    background: rgb(19, 35, 55);
    position: sticky;
    top: 0px;
    z-index: 1;
}

.devtools__checkbox-container {
    display: flex;
    flex-wrap: wrap;
}

.devtools__checkbox {
    margin: 10px 5px;
}

.devtools__checkbox-label {
    color: #fff;
}

.devtools__endpoint-container {
    margin: 10px;
    gap: 15px;
    display: flex;
    flex-direction: column;
}

.devtools__endpoint-container a {
    color: #003366;
}

.devtools__endpoint-container .dc-input__field {
    color: #fff;
}

.devtools__endpoint-container .dc-input__label {
    background: rgb(11, 21, 33);
}

.devtools__endpoint-container .dc-input__field~label {
    color: #fff !important;
}

.devtools__endpoint-actions {
    display: flex;
    gap: 15px;
}