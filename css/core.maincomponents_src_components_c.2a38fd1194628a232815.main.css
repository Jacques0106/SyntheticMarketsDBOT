/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-carousel {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.dc-carousel--mt5 {
    justify-content: initial;
}

.dc-carousel__container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
}

.dc-carousel__box {
    overflow: hidden;
}

.dc-carousel__box--mt5 {
    margin: 0 -1.4rem;
}

.dc-carousel__wrapper {
    display: flex;
    flex-direction: row;
    transition: transform 0.3s linear;
    width: -moz-fit-content;
    width: fit-content;
    padding: 0.5rem 0;
    height: 100%;
}

.dc-carousel__wrapper--mt5 {
    padding-top: 0;
    padding-top: initial;
}

.dc-carousel__card {
    display: flex;
    flex-direction: column;
    padding-bottom: 0.8rem;
}

.dc-carousel__nav {
    align-items: center;
    box-sizing: border-box;
    display: flex;
    width: 100%;
    padding: 0 2.4rem;
    overflow: hidden;
    margin-bottom: 2.4rem;
    justify-content: space-between;
}

.dc-carousel__nav--upper {
    margin-bottom: 0;
}

.dc-carousel__nav-list {
    display: inline-block;
    text-align: center;
    margin: 0 auto;
    position: relative;
}

.dc-carousel__nav--lower {
    margin-bottom: 0;
}

.dc-carousel__nav-item {
    width: 0.8rem;
    height: 0.8rem;
    border-radius: 50%;
    display: inline-block;
    margin: 0 0.8rem;
    cursor: pointer;
}

.dc-carousel__nav-item--active {
    position: absolute;
    top: 0;
    left: 0;
    cursor: auto;
    cursor: initial;
    transition: transform 0.3s linear;
}

.dc-carousel__icon {
    cursor: pointer;
}

.dc-carousel__icon--left {
    position: relative;
    right: 5.2rem;
}

.dc-carousel__icon--mt5 {
    background: var(--icon-grey-background);
    width: 6rem;
    height: 6rem;
    border-radius: 50%;
    transform: scale(0.5);
    line-height: 6rem;
    text-align: center;
    justify-content: space-between;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.cfd-compare-accounts-carousel {
    position: relative;
    --slide-spacing: 1rem;
    --slide-size: 50%;
    --slide-height: 19rem;
    overflow: hidden;
}

.cfd-compare-accounts-carousel__viewport {
    overflow: hidden;
    width: 100%;
    height: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .cfd-compare-accounts-carousel__viewport {
        padding-bottom: 6rem;
    }
}

.cfd-compare-accounts-carousel__container {
    backface-visibility: hidden;
    display: flex;
    touch-action: pan-y;
    flex-direction: row;
    max-height: auto;
    margin-left: calc(var(--slide-spacing) * -1);
    transition: transform 0s ease-in-out;
}

.cfd-compare-accounts-carousel__slide {
    flex: 0 0 var(--slide-size);
    min-width: 0;
    padding-left: var(--slide-spacing);
    position: relative;
}

.cfd-compare-accounts-carousel__slide__img {
    display: block;
    height: var(--slide-height);
    width: 100%;
    -o-object-fit: cover;
    object-fit: cover;
}

.cfd-compare-accounts-carousel__button {
    background-color: var(--general-main-1);
    z-index: 1;
    color: var(--background-site);
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    top: 50%;
    cursor: pointer;
    width: 4rem;
    height: 4rem;
    border: 1px solid var(--general-background-main);
    border-radius: 50%;
    box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.08), 0px 24px 24px rgba(0, 0, 0, 0.08);
}

.cfd-compare-accounts-carousel__button--prev {
    left: 1.6rem;
}

.cfd-compare-accounts-carousel__button--next {
    right: 1.6rem;
}

.cfd-compare-accounts-carousel__button:disabled {
    opacity: 0.3;
    display: none;
}

.cfd-compare-accounts-carousel__button__svg {
    width: 50%;
    height: 35%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .cfd-compare-accounts-carousel__button {
        display: none;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-clipboard {
    cursor: pointer;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-checkbox {
    display: flex;
    justify-content: flex-start;
    cursor: pointer;
    align-items: center;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}

.dc-checkbox__input {
    display: none;
}

.dc-checkbox__box {
    outline: none !important;
}

.dc-checkbox__box {
    display: flex;
    width: 16px;
    height: 16px;
    transition: 0.3s ease-in-out;
    flex-shrink: 0;
    margin: 0 8px;
    border-radius: 2px;
    align-self: center;
    box-sizing: border-box;
    border: 2px solid var(--text-less-prominent);
}

.dc-checkbox__box--active {
    border: none;
    background-color: var(--brand-red-coral);
}

.dc-checkbox--active {
    border: none;
    background-color: var(--brand-red-coral);
}

.dc-checkbox--disabled {
    cursor: not-allowed !important;
}

.dc-checkbox--disabled {
    opacity: 0.5;
}

.dc-checkbox--grey-disabled {
    background-color: var(--checkbox-disabled-grey);
}

.dc-checkbox__label--error {
    color: var(--text-loss-danger) !important;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-checklist {
    max-width: 400px;
}

.dc-checklist__item {
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: solid 1px var(--border-normal);
    padding: 12px;
}

.dc-checklist__item-text {
    max-width: 80%;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
}

.dc-checklist__item-status {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 32px;
}

.dc-checklist__item-status--action {
    cursor: pointer;
    background-color: var(--brand-red-coral);
    border-radius: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

.dc-checklist__item-status--disabled {
    pointer-events: none;
}

.dc-checklist__item-status--button {
    width: auto;
}

.dc-checklist__item--disabled {
    opacity: 0.5;
    pointer-events: none;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-circular-progress {
    position: relative;
    line-height: 0;
    width: -moz-fit-content;
    width: fit-content;
}

.dc-circular-progress__bar {
    transform: scaleX(-1) rotate(-90deg);
    transform-origin: 50% 50%;
    transition: stroke-dashoffset 1s;
    stroke: var(--brand-secondary);
}

.dc-circular-progress__bar--warning {
    stroke: var(--status-warning);
}

.dc-circular-progress__bar--danger {
    stroke: var(--status-danger);
}

.dc-circular-progress--clockwise {
    transform: rotate(-90deg);
}

.dc-circular-progress__icon {
    position: absolute;
    width: 1.6rem;
    height: 100%;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** Slideout Animation */

@keyframes SlideIn {
    from {
        opacity: 0;
        max-height: 0;
    }
    to {
        opacity: 1;
        height: auto;
        max-height: 100vh;
    }
}

@keyframes SlideOut {
    from {
        opacity: 1;
        max-height: 100vh;
    }
    to {
        opacity: 0;
        max-height: 0;
    }
}

.dc-collapsible {
    padding: 0.8rem;
    border-radius: 0.4rem;
    background-color: var(--general-section-1);
}

.dc-collapsible--has-collapsible-btn {
    padding-top: 0;
}

.dc-collapsible--has-title {
    padding-bottom: 0;
}

.dc-collapsible__button {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 32px;
}

.dc-collapsible__button--handle {
    align-items: baseline;
    height: 3.8rem;
}

.dc-collapsible__icon {
    transition: transform 0.3s ease-in-out;
}

.dc-collapsible__icon--handle {
    width: 4rem;
    height: 0.4rem;
    margin-top: 0.8rem;
    border-radius: 0.2rem;
    background-color: var(--general-active);
}

.dc-collapsible__icon--top {
    transform: rotate(180deg);
}

.dc-collapsible__icon--top.dc-collapsible__icon--is-open {
    transform: rotate(0deg);
}

.dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
    transform: rotate(180deg);
}

.dc-collapsible__item--collapsed {
    margin: 0 !important;
    margin: initial !important;
    padding: 0 !important;
    padding: initial !important;
}

.dc-collapsible__item--collapsed {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
}

.dc-collapsible__title {
    margin-left: 0;
    margin-right: auto;
}

.dc-collapsible .trade-container__fieldset {
    flex: 1;
}

.dc-collapsible .trade-container__fieldset .dc-button-menu__wrapper {
    height: 4rem;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-general);
}

.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-general);
}

.dc-content-expander__select-arrow .color2-fill {
    fill: none;
}

.dc-content-expander__select-arrow .color2-stroke {
    stroke: none;
}

.active.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.active.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.active.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}

.active.dc-content-expander__select-arrow .color2-fill {
    fill: none;
}

.active.dc-content-expander__select-arrow .color2-stroke {
    stroke: none;
}

.disabled.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.disabled.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-disabled);
}

.disabled.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-disabled);
}

.disabled.dc-content-expander__select-arrow .color2-fill {
    fill: none;
}

.disabled.dc-content-expander__select-arrow .color2-stroke {
    stroke: none;
}

.white.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.white.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.white.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}

.border_hover_color.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.border_hover_color.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-prominent);
}

.border_hover_color.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-prominent);
}

.secondary.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
}

.secondary.dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-less-prominent);
}

.secondary.dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-less-prominent);
}

/**
 * Define Breakpoints here.
 */

.dc-content-expander {
    cursor: pointer;
    display: flex;
    align-items: center;
    padding: 0 0.8rem;
    height: 4rem;
    position: relative;
}

.dc-content-expander__content {
    transition: opacity 0.25s linear;
}

.dc-content-expander__content--enter {
    opacity: 0;
}

.dc-content-expander__content--enter-done {
    opacity: 1;
}

.dc-content-expander__content--exit {
    opacity: 0;
}

.dc-content-expander__title {
    display: block;
    padding-right: 0.8rem;
}

.dc-content-expander__title--spaced {
    flex: 1;
}

.dc-content-expander--expanded .dc-content-expander__select-arrow {
    transform: rotate(180deg);
}

.dc-content-expander--expanded .dc-content-expander__select-arrow--invert {
    transform: rotate(0deg);
}

.dc-content-expander__select-arrow {
    pointer-events: none;
    transform: rotate(0);
    transform-origin: 50% 45%;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
}

.dc-content-expander__select-arrow--invert {
    transform: rotate(180deg);
}

.dc-content-expander__wrapper {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-counter {
    align-items: center;
    background: var(--status-danger);
    border-radius: 0.8rem;
    color: var(--text-colored-background);
    display: inline-flex;
    font-size: 1rem;
    font-weight: bold;
    justify-content: center;
    line-height: 1;
    padding: 3px 5px;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.composite-checkbox {
    border-radius: 0.4rem;
    border: 1px solid var(--border-normal);
    padding: 1.6rem;
    height: 100%;
    cursor: pointer;
}

.composite-checkbox__description {
    margin: 1.2rem 0 0;
}

.composite-checkbox:hover:not(.composite-checkbox--active) {
    border: 1px solid var(--border-hover);
}

.composite-checkbox--active {
    border: 1px solid var(--border-active);
}

.composite-checkbox .dc-checkbox__box {
    margin-left: 0;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define .dc-currency-badge */

.dc-currency-badge {
    align-self: flex-start;
    padding: 0.3rem;
    background-color: #85acb0;
    border-radius: 4px;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-contract-card-dialog; weak */

.dc-contract-card-dialog {
    position: fixed;
    display: grid;
    background: var(--general-main-2);
    border-radius: 4px;
    box-shadow: 0 4px 8px 2px var(--shadow-menu);
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
    padding: 1.6rem;
    width: 240px;
    z-index: 99;
}

.dc-contract-card-dialog--enter-done {
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.dc-contract-card-dialog--enter,
.dc-contract-card-dialog--exit {
    opacity: 0;
    transform: translate3d(-20px, 0, 0);
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-dialog__input {
        border-bottom: 1px solid var(--border-disabled);
        padding: 1rem 1.6rem;
    }
    .dc-contract-card-dialog__input .dc-popover {
        padding: 0.6rem 1rem;
    }
}

.dc-contract-card-dialog__input .dc-input-wrapper__input {
    border: 1px solid var(--border-normal);
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

.dc-contract-card-dialog__input--currency {
    position: absolute;
    height: 3.2rem;
    right: 4rem;
    align-items: center;
    justify-content: center;
    display: flex;
    background: transparent;
    border-color: transparent;
    z-index: 2;
    color: inherit;
}

.dc-contract-card-dialog__input--currency--symbol {
    padding-bottom: 0.2rem;
}

.dc-contract-card-dialog__input--currency:before {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: inherit;
}

.dc-contract-card-dialog__popover {
    margin-top: -50%;
}

.dc-contract-card-dialog__popover-bubble {
    /* postcss-bem-linter: ignore */
}

.dc-contract-card-dialog__popover-bubble .dc-checkbox {
    margin-top: 0.8rem;
    /* postcss-bem-linter: ignore */
}

.dc-contract-card-dialog__popover-bubble .dc-checkbox__label {
    font-size: inherit;
}

.dc-contract-card-dialog__button {
    margin-top: 0.8rem;
}

.dc-contract-card-dialog__button .dc-btn {
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-dialog__button .dc-btn {
        flex: 1;
        height: 4rem;
        margin: 0 1.6rem;
    }
}

.dc-contract-card-dialog__form {
    display: grid;
    flex: 1;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-dialog__form {
        grid-template-rows: auto auto 1fr;
        margin: 0 0 1.6rem;
    }
    .dc-contract-card-dialog__form--no-stop-loss {
        grid-template-rows: auto 1fr;
    }
}

@media (min-width: 1024px) {
    .dc-contract-card-dialog__form {
        grid-gap: 0.8rem;
    }
}

.dc-contract-card-dialog__form .dc-checkbox__box {
    margin-left: 0;
}

.dc-contract-card-dialog__total-profit {
    height: 3.6rem;
    padding: 1.6rem;
    border-bottom: 1px solid var(--border-disabled);
    color: var(--text-general);
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 1.4rem;
}

/** @define dc-contract-card-dialog-toggle; */

.dc-contract-card-dialog-toggle {
    all: unset;
    position: absolute;
    display: flex;
    justify-content: end;
    width: calc(100% + 0.4rem);
    height: calc(100% + 0.4rem);
    right: 0.4rem;
    top: -0.4rem;
    border: 1px solid var(--general-section-1);
    border-radius: 4px;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-dialog-toggle {
        width: 100%;
    }
}

.dc-contract-card-dialog-toggle__icon {
    float: right;
    margin: 3px;
}

.dc-contract-card-dialog-toggle:hover {
    cursor: pointer;
    border-color: var(--button-secondary-default);
}

@charset "UTF-8";
/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-result */

.dc-result__content {
    display: flex;
    justify-items: center;
    align-items: center;
    flex-direction: column;
    gap: 0.4rem;
}

.dc-result__caption {
    text-transform: capitalize;
    font-size: 1.4em;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: opacity 0.25s ease;
    gap: 0.4rem;
}

.dc-result__caption--won {
    color: var(--text-profit-success);
}

.dc-result__caption--lost {
    color: var(--text-loss-danger);
}

.dc-result__caption-wrapper {
    cursor: pointer;
    width: 100%;
    height: calc(100% - 24px);
    text-decoration: none;
    position: absolute;
    top: 24px;
    z-index: 2;
    display: flex;
    justify-content: center;
    align-items: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-result__caption {
        pointer-events: none;
    }
}

.dc-result__close-btn {
    position: absolute;
    top: 2px;
    right: 8px;
    cursor: pointer;
    visibility: visible;
}

.dc-result__close-btn:after {
    content: "×";
    font-size: 24px;
    font-weight: 300;
    color: var(--text-general);
}

.dc-result__positions-overlay {
    max-width: 218px;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

.dc-contract-card {
    box-sizing: border-box;
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    text-decoration: none;
    position: relative;
    padding: 0.8rem;
    background-color: var(--general-main-1);
    color: var(--text-prominent);
    padding-bottom: 0.8rem;
}

.dc-contract-card:before {
    content: "";
    position: absolute;
    border-radius: 4px;
    height: 52px;
    width: 100%;
    left: 0;
    top: 0;
}

.dc-contract-card--green:before {
    background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));
}

.dc-contract-card--red:before {
    background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));
}

.dc-contract-card--loss {
    color: var(--text-loss-danger);
}

.dc-contract-card--profit {
    color: var(--text-profit-success);
}

.dc-contract-card__grid {
    display: grid;
    grid-template-rows: 1fr auto;
    grid-gap: 4px;
    min-height: 4rem;
}

.dc-contract-card__grid-underlying-trade {
    grid-template-columns: 1fr 1fr;
    width: 100%;
}

.dc-contract-card__grid-underlying-trade--trader {
    grid-template-columns: 1.2fr 1fr;
}

.dc-contract-card__grid-underlying-trade--trader--accumulator,
.dc-contract-card__grid-underlying-trade--trader--turbos {
    display: flex;
    grid-gap: 1px;
}

.dc-contract-card__grid-underlying-trade--trader--accumulator-sold,
.dc-contract-card__grid-underlying-trade--trader--turbos-sold {
    padding-top: 1rem;
}

.dc-contract-card__grid-underlying-trade--mobile {
    grid-template-columns: 1fr 1fr 25%;
}

.dc-contract-card__grid-profit-payout {
    grid-template-columns: 1fr 1fr;
    padding: 8px 0;
    border-radius: 4px;
    margin-left: -4px;
    margin-right: -4px;
    background: var(--general-hover);
}

.dc-contract-card__grid-label {
    font-size: 1rem;
    align-self: flex-start;
    text-transform: none;
    line-height: 1.5;
    color: var(--text-general);
    white-space: nowrap;
}

.dc-contract-card__grid-value {
    font-size: 1.2rem;
    font-weight: bold;
    align-self: flex-start;
    line-height: 1.5;
}

.dc-contract-card__grid-items {
    grid-template-columns: 1fr 1fr;
    grid-gap: 0.8rem 0.4rem;
    padding: 0.8rem 0;
}

.dc-contract-card__result {
    position: absolute;
    top: 0;
    width: 100%;
    height: calc(100% - 1rem);
    border-radius: 4px;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--overlay-inside-dialog);
}

.dc-contract-card__result--won,
.dc-contract-card__result--won:after {
    background-image: var(--gradient-success);
}

.dc-contract-card__result--lost,
.dc-contract-card__result--lost:after {
    background-image: var(--gradient-danger);
}

.dc-contract-card__result--lg {
    max-height: 100%;
}

.dc-contract-card__result:hover {
    background: 0 !important;
}

.dc-contract-card__result:hover .dc-result__content {
    opacity: 0;
}

.dc-contract-card__result:after {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 4px;
    z-index: 2;
}

.dc-contract-card__result--enter,
.dc-contract-card__result--exit {
    opacity: 0;
}

.dc-contract-card__result--enter-done {
    opacity: 1;
}

.dc-contract-card__wrapper {
    margin: 0 1em;
    min-width: 218px;
    max-width: 238px;
    width: -moz-min-content;
    width: min-content;
    border-radius: 4px;
    transition: transform 0.25s ease, opacity 0.25s linear;
    position: relative;
    background: var(--general-main-1);
}

.dc-contract-card__wrapper .currency-badge {
    margin-bottom: 5px;
}

.dc-contract-card__wrapper--active:before {
    content: "";
    top: -1px;
    left: -1px;
    width: calc(100% + 2px);
    height: calc(100% + 2px);
    position: absolute;
    box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
    border-radius: 4px;
    pointer-events: none;
}

.dc-contract-card__wrapper--enter-done {
    opacity: 1;
    transform: translateY(0);
}

.dc-contract-card__wrapper--enter,
.dc-contract-card__wrapper--exit {
    opacity: 0;
    transform: translateY(-16px);
}

.dc-contract-card .purchase-price-container,
.dc-contract-card .potential-payout-container {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
}

.dc-contract-card .purchase-price__label,
.dc-contract-card .potential-payout__label {
    font-size: 1rem;
    align-self: flex-start;
    text-transform: none;
    margin-bottom: 4px;
    color: var(--text-general);
    white-space: nowrap;
}

.dc-contract-card .purchase-price__value,
.dc-contract-card .potential-payout__value {
    font-size: 1em;
    font-weight: bold;
    align-self: flex-start;
}

.dc-contract-card .potential-payout-container {
    padding-left: 4px;
}

.dc-contract-card .potential-payout-price__value {
    font-size: 1em;
    font-weight: bold;
    align-self: flex-start;
}

.dc-contract-card__separator {
    width: 100%;
    border-top: 1px solid var(--general-section-1);
    margin: 4px 0 0;
}

.dc-contract-card__underlying-name {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-weight: bold;
    font-size: 1.2em;
    max-width: 18rem;
    min-width: 10rem;
}

.dc-contract-card__underlying-name--accumulator {
    max-width: 10rem;
}

.dc-contract-card__type {
    font-size: 1.2em;
    display: flex;
    justify-content: flex-start;
    font-weight: bold;
    /* postcss-bem-linter: ignore */
}

.dc-contract-card__type .category-type .color1-fill {
    fill: var(--brand-red-coral) !important;
}

.dc-contract-card__type .category-type .color2-fill {
    fill: var(--brand-secondary) !important;
}

.dc-contract-card__symbol {
    margin-left: 0.4rem;
}

.dc-contract-card__symbol--smarttrader-contract {
    width: 7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__symbol--smarttrader-contract {
        width: auto;
        width: initial;
    }
}

.dc-contract-card__header {
    display: flex;
    justify-content: space-evenly;
    flex-direction: column;
    margin: 0.5em 0.2em;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__header {
        margin: 0 8px;
    }
}

.dc-contract-card__body {
    border-radius: 4px;
    width: 100%;
    padding: 0.8rem 0.4rem;
    color: var(--text-prominent);
    display: flex;
}

.dc-contract-card__body-wrapper {
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__body {
        padding: 0 8px;
    }
    .dc-contract-card__body-wrapper {
        display: flex;
    }
}

.dc-contract-card-items-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-areas: "stake current-stake" "deal-cancel-fee limit-order-info" "buy-price limit-order-info";
    grid-gap: 0.8rem 0.4rem;
    flex: 1;
    margin-top: 0.5rem;
}

.dc-contract-card-items-wrapper--mobile {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas: "stake current-stake limit-order-info" "deal-cancel-fee buy-price limit-order-info";
    grid-gap: 0.8rem 0.4rem;
    flex: 1;
    padding: 0.4rem 0;
}

.dc-contract-card-items-wrapper--mobile .dc-contract-card-items-wrapper-group .dc-contract-card-item:first-child {
    margin-bottom: 0.8rem;
}

.dc-contract-card-items-wrapper--has-progress-slider {
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas: "stake current-stake date-expiry" "deal-cancel-fee buy-price date-expiry" "limit-order-info limit-order-info date-expiry";
}

.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__limit-order-info {
    grid-template-columns: 1fr 1fr;
}

.dc-contract-card-items-wrapper--has-progress-slider .dc-contract-card__stop-loss {
    order: initial !important;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card--turbos .dc-contract-card-item__body,
    .dc-contract-card--lookbacks .dc-contract-card-item__body {
        padding-left: 0;
    }
}

.dc-contract-card--turbos .dc-contract-card__buy-price,
.dc-contract-card--lookbacks .dc-contract-card__buy-price {
    grid-column: 1/1;
    grid-row: 1/1;
    padding: 0.8rem 0 0;
}

.dc-contract-card--turbos .dc-contract-card__contract-value,
.dc-contract-card--lookbacks .dc-contract-card__contract-value {
    grid-column: 2/2;
    grid-row: 1/2;
    padding: 0.8rem 0 0;
}

.dc-contract-card--turbos .dc-contract-card__entry-spot,
.dc-contract-card--lookbacks .dc-contract-card__entry-spot {
    grid-column: 1/2;
    grid-row: 2/2;
}

.dc-contract-card--turbos .dc-contract-card__barrier-level,
.dc-contract-card--lookbacks .dc-contract-card__barrier-level {
    grid-column: 1/1;
    grid-row: 3/3;
}

.dc-contract-card--turbos .dc-contract-card__limit-order-info,
.dc-contract-card--lookbacks .dc-contract-card__limit-order-info {
    grid-row: 2/2;
    grid-column: 2/2;
}

.dc-contract-card--turbos .dc-contract-card__status,
.dc-contract-card--lookbacks .dc-contract-card__status {
    align-self: center;
    justify-self: center;
    grid-row: 1/3;
    grid-column: 3/3;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card--turbos,
    .dc-contract-card--lookbacks {
        grid-template-columns: 1fr 1fr 1fr;
    }
}

.dc-contract-card__profit-loss {
    font-size: 1.2em;
    text-align: center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-weight: bold;
}

.dc-contract-card__profit-loss-label {
    font-size: 1em;
    margin-bottom: 4px;
    font-weight: normal;
    white-space: nowrap;
    max-width: 90px;
}

.dc-contract-card__profit-loss--is-crypto {
    margin-left: -6px;
}

.dc-contract-card__profit-loss--negative {
    color: var(--text-loss-danger);
}

.dc-contract-card__profit-loss--negative:before {
    content: "-";
    color: inherit;
}

.dc-contract-card__profit-loss--positive {
    color: var(--text-profit-success);
}

.dc-contract-card__profit-loss--positive:before {
    content: "+";
    color: inherit;
}

.dc-contract-card-item__header {
    max-width: calc(100% - 2rem);
    line-height: 1.4;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-item__header {
        max-width: none;
        max-width: initial;
    }
}

.dc-contract-card-item__body {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.25;
    display: flex;
    align-self: flex-start;
    line-height: 1.5;
}

.dc-contract-card-item__body--is-crypto {
    margin-left: -6px;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-item__body {
        padding-left: 0.4rem;
    }
}

.dc-contract-card-item__body--loss {
    color: var(--text-loss-danger) !important;
}

.dc-contract-card-item__body--loss:before {
    content: "-";
}

.dc-contract-card-item__body--profit {
    color: var(--text-profit-success) !important;
}

.dc-contract-card-item__body--profit:before {
    content: "+";
}

.dc-contract-card-item__total-profit-loss {
    padding: 0.8rem 0.8rem 0;
    border-top: 1px solid var(--general-section-1);
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 0.8rem;
}

.dc-contract-card-item__total-profit-loss .dc-contract-card-item__header,
.dc-contract-card-item__total-profit-loss .dc-contract-card-item__body {
    font-size: 1.4rem;
    line-height: 2rem;
    align-self: center;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-item__total-profit-loss {
        flex-direction: row;
        justify-content: center;
        grid-column: 1/4;
    }
    .dc-contract-card-item__total-profit-loss-value {
        margin-left: 0.2rem;
    }
}

.dc-contract-card-item__total-profit-loss-label,
.dc-contract-card-item__total-profit-loss-value {
    font-size: 1.4rem;
    line-height: 2rem;
}

.dc-contract-card-item__payout-limit {
    padding: 0.8rem 0 0;
    border-top: 1px solid var(--general-section-1);
    display: flex;
    flex-direction: column;
    align-items: center;
}

.dc-contract-card-item__payout-limit .dc-contract-card-item__body {
    align-self: center;
}

.dc-contract-card-item__footer .lookbacks--note {
    margin-top: 0.4rem;
}

.dc-contract-card__sell-button {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.25s ease, opacity 0.25s linear;
    padding-top: 0.4rem;
    margin-top: 0.8rem;
    border-top: 1px solid var(--general-section-1);
    min-height: 4rem;
}

.dc-contract-card__sell-button--positions {
    padding: 0.8rem 0;
    margin: 0 0.8rem;
}

.dc-contract-card__sell-button--enter-done {
    opacity: 1;
}

.dc-contract-card__sell-button--enter,
.dc-contract-card__sell-button--exit {
    opacity: 0;
    transform: translateY(-8px);
}

.dc-contract-card__sell-button--has-cancel-btn {
    justify-content: space-between;
    display: grid;
    grid-template-columns: 1fr 1fr;
}

.dc-contract-card__sell-button--has-cancel-btn .dc-btn--cancel {
    margin-left: 0.8rem;
    max-width: 10.5rem;
}

.dc-contract-card__sell-button .dc-remaining-time {
    border-radius: 0.4rem;
    font-size: 1.2rem;
    margin-left: 0.8rem;
}

.dc-contract-card__sell-button .dc-btn--sell,
.dc-contract-card__sell-button .dc-btn--cancel {
    height: 2.4rem;
}

.dc-contract-card__sell-button .dc-btn--sell .dc-btn__text,
.dc-contract-card__sell-button .dc-btn--cancel .dc-btn__text {
    font-size: 1.2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card__sell-button .dc-btn--sell,
    .dc-contract-card__sell-button .dc-btn--cancel {
        height: 3.2rem;
    }
}

.dc-contract-card__indicative--movement {
    margin-left: 2px;
    width: 16px;
    height: 16px;
}

.dc-contract-card__indicative--movement:after {
    content: "";
    width: 16px;
}

.dc-contract-card__status {
    min-width: 25%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dc-contract-card__status .result-icon,
.dc-contract-card__status--accumulator-mobile-positions .dc-result__icon {
    margin-left: 0.4rem;
}

.dc-contract-card__limit-order-info {
    grid-area: limit-order-info;
    display: grid;
    grid-gap: 0.4rem 0;
    position: relative;
}

.dc-contract-card__limit-order-info .dc-contract-card__stop-loss {
    padding-bottom: 0.4rem;
}

.dc-contract-card__take-profit {
    position: relative;
}

.dc-contract-card__buy-price {
    grid-area: buy-price;
}

.dc-contract-card__deal-cancel-fee {
    grid-area: deal-cancel-fee;
}

.dc-contract-card__stake {
    grid-area: stake;
}

.dc-contract-card__date-expiry {
    grid-area: date-expiry;
}

.dc-contract-card__date-expiry .dc-contract-card-item__body {
    justify-content: flex-end;
}

.dc-contract-card__current-stake {
    grid-area: current-stake;
}

.dc-contract-card__sell-button-mobile {
    justify-self: center;
    align-self: center;
}

.dc-contract-card__sell-button-mobile .dc-btn--sell {
    height: 3.2rem !important;
}

.dc-contract-card__no-resale-msg {
    font-size: 1.1rem;
}

.dc-contract-card .contract-audit__wrapper {
    padding: 2px 0;
    width: 100%;
}

.dc-contract-card .contract-audit__wrapper--is-open {
    margin-top: 0.5em;
}

.dc-contract-card .contract-audit__toggle {
    margin: 0 0 -0.5em;
    width: 100%;
}

.dc-contract-card .contract-audit__label {
    font-size: 0.8em;
    text-align: left;
}

.dc-contract-card .contract-audit__value {
    font-size: 1em;
    text-align: left;
}

.dc-contract-card .dc-contract-type__type-wrapper {
    width: auto;
    width: initial;
    height: auto;
    height: initial;
}

/** @define dc-contract-type */

.dc-contract-type {
    display: flex;
    flex-direction: row;
    align-items: center;
    text-align: center;
    margin-left: -4px;
}

.dc-contract-type__type-wrapper {
    margin: 0;
    padding: 0.5em 0.3em;
    display: flex;
    justify-content: center;
    align-items: center;
    /* postcss-bem-linter: ignore */
}

.dc-contract-type__type-wrapper .category-type {
    width: 20px;
    height: 20px;
}

.dc-contract-type__type-label {
    width: 3.8em;
    line-height: 1.5;
    text-align: left;
}

.dc-contract-type__type-label--smarttrader-contract {
    width: 7rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-type__type-label--smarttrader-contract {
        width: 9rem;
    }
}

.dc-contract-type__type-label--lookbacks-contract {
    width: 5rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-type__type-label--lookbacks-contract {
        width: auto;
        width: initial;
    }
}

.dc-contract-type__type-label-trade-param {
    font-size: 1rem;
    line-height: 1rem;
    color: var(--text-less-prominent);
}

/** @define dc-btn; */

.dc-btn--sell {
    width: 100%;
}

/** @define dc-remaining-time; weak */

.dc-remaining-time {
    display: inline;
}

/** @define dc-tick-counter-bar; */

.dc-tick-counter-bar__container {
    grid-column-start: 1;
    grid-column-end: 3;
    position: relative;
    width: 100%;
    padding: 0;
    padding: initial;
    box-sizing: border-box;
    margin: 0.8rem 0;
    border-bottom: 1px solid var(--general-section-1);
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tick-counter-bar__container {
        display: flex;
        flex-direction: column;
        align-items: center;
        border-bottom: 0;
        border-bottom: initial;
        margin: 0;
        margin: initial;
    }
}

.dc-tick-counter-bar__track {
    height: 1.8rem;
    background: var(--general-section-1);
    border-radius: 4px;
    position: relative;
    margin-bottom: 0.8rem;
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-tick-counter-bar__track {
        display: flex;
        flex-direction: column;
        align-items: center;
        border-bottom: 0;
        border-bottom: initial;
        margin: 0.2rem 0 0.4rem;
    }
}

.dc-tick-counter-bar__text {
    position: absolute;
    color: var(--status-success);
    width: 100%;
    text-align: center;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-datepicker; weak */

.dc-datepicker {
    position: relative;
    display: inline-block;
    width: 100%;
}

.dc-datepicker__container {
    display: flex;
    border: 1px solid var(--border-normal);
    border-radius: 4px;
    align-items: center;
}

.dc-datepicker__container:hover:not(.dc-input--disabled) {
    border-color: var(--border-hover);
}

.dc-datepicker__container[focus-within] {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container:focus-within {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container[focus-within]:hover {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container:focus-within:hover {
    border-color: var(--brand-secondary);
}

.dc-datepicker__container--error {
    border-color: var(--brand-red-coral) !important;
}

.dc-datepicker__container--disabled {
    border-color: var(--general-disabled);
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-datepicker__container input[type=date]::-webkit-calendar-picker-indicator {
        background: transparent;
        bottom: 0;
        color: transparent;
        cursor: pointer;
        height: auto;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
        width: auto;
    }
}

.dc-datepicker__hint {
    margin-left: 1.3rem;
    position: absolute;
    top: 4.1rem;
}

.dc-datepicker__hint--relative {
    margin-left: 1.2rem;
    position: relative;
    top: auto;
    top: initial;
}

.dc-datepicker__input .dc-input__field {
    width: 100%;
    border-radius: 4px;
    box-sizing: border-box;
    -webkit-appearance: none;
    -moz-appearance: none;
}

.dc-datepicker__input .dc-input__field:hover:not(:disabled) {
    cursor: pointer;
    border-color: var(--border-hover);
}

.dc-datepicker__input .dc-input__field:focus {
    outline: none;
}

.dc-datepicker__input .dc-input__field:active {
    border-color: var(--border-active);
}

.dc-datepicker__input .dc-input__field::-ms-clear {
    display: none;
}

.dc-datepicker__input .dc-input__field::-moz-placeholder {
    /* Fix value placeholder for datepicker for Firefox 19+ */
    line-height: 4rem;
}

.dc-datepicker__input--has-leading-icon .dc-input__field {
    text-align: center;
}

.dc-datepicker .dc-icon {
    margin-bottom: 0.3rem;
    margin-right: -0.2rem;
}

.dc-datepicker .dc-icon:not(.dc-icon--disabled) {
    cursor: pointer;
}

.dc-datepicker__picker {
    position: absolute;
    z-index: 2;
    transform: translate3d(0, 0, 0);
    opacity: 1;
}

.dc-datepicker__picker--left-enter,
.dc-datepicker__picker--left-exit {
    transform: translate3d(-275px, 0, 0);
    opacity: 0;
}

.dc-datepicker__picker--left-enter-done {
    transform: translate3d(-295px, 0, 0);
    opacity: 1;
}

.dc-datepicker__picker--left-enter-done,
.dc-datepicker__picker--left-exit {
    transition: transform 0.25s ease, opacity 0.25s linear;
}

.dc-datepicker__picker--top-enter,
.dc-datepicker__picker--top-exit {
    transform: translate3d(0, 0, 0);
    opacity: 0;
}

.dc-datepicker__picker--top-enter-done {
    transform: translate3d(0, -40px, 0);
    opacity: 1;
}

.dc-datepicker__picker--top-enter-done,
.dc-datepicker__picker--top-exit {
    transition: transform 0.25s ease, opacity 0.25s linear;
}

.dc-datepicker__picker--bottom-enter,
.dc-datepicker__picker--bottom-exit {
    transform: translate3d(0, 0, 0);
    opacity: 0;
}

.dc-datepicker__picker--bottom-enter-done {
    transform: translate3d(0, 40px, 0);
    opacity: 1;
}

.dc-datepicker__picker--bottom-enter-done,
.dc-datepicker__picker--bottom-exit {
    transition: transform 0.25s ease, opacity 0.25s linear;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-datepicker--hint {
        margin-bottom: 5rem;
    }
    .dc-datepicker__native {
        opacity: 0;
        width: 100%;
        min-width: calc(100% - 1rem);
        position: absolute;
        height: 38px;
    }
    .dc-datepicker__display {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        padding-left: 1rem;
        height: 38px;
        position: relative;
        width: 100%;
        color: var(--text-prominent);
    }
    .dc-datepicker__display-text {
        background-color: inherit;
        padding-top: 0.2rem;
    }
    .dc-datepicker__display-text--has-error {
        padding-top: 0;
        padding-top: initial;
    }
    .dc-datepicker__calendar-icon {
        pointer-events: none;
        margin-right: 1rem;
    }
    .dc-datepicker__placeholder {
        color: var(--text-general);
        transform: none;
        transition: transform 0.25s linear;
        position: absolute;
        font-size: 1.4rem;
        left: 1.3rem;
    }
    .dc-datepicker__placeholder--has-value {
        transform: translate3d(-14px, -20px, 0px) scale(0.7);
        color: var(--text-general);
        background-color: var(--fill-normal);
    }
    .dc-datepicker__placeholder--has-error {
        color: var(--brand-red-coral);
    }
    .dc-datepicker__placeholder--is-focused {
        color: var(--brand-secondary);
    }
    .dc-datepicker__error {
        display: flex;
        position: absolute;
        top: 4.5rem;
        left: 1.3rem;
    }
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define data-list; weak */

.data-list {
    position: relative;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.data-list__body {
    flex: 1;
}

.data-list__body-wrapper {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.data-list__footer {
    width: 100%;
    background: var(--general-main-1);
    border-top: 2px solid var(--border-disabled);
    display: flex;
    align-items: center;
    position: relative;
}

.data-list__item {
    height: inherit;
}

.data-list__item--wrapper {
    height: inherit;
    text-decoration: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
}

@media (min-width: 320px) and (max-width: 767px) {
    .data-list__item {
        border-radius: 4px;
    }
}

.data-list__row {
    display: flex;
    flex-direction: row;
    padding: 4px 16px;
    width: 100%;
}

.data-list__row>* {
    flex: 1;
}

.data-list__row-content {
    font-size: 1.4rem;
    line-height: 2rem;
    color: var(--text-general);
}

.data-list__row-cell--amount {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    flex: none;
}

.data-list__row-title {
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--text-prominent);
    line-height: 2rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .data-list__row-title {
        font-size: 1.2rem;
    }
}

.data-list__row-divider {
    margin: 0 1.6rem;
}

.data-list__row-divider:after {
    content: "";
    display: block;
    border-top: 1px solid var(--general-main-1);
}

.data-list__row--wrapper:not(.data-list__item--dynamic-height-wrapper) {
    height: 100%;
}

.data-list__row--timer {
    flex: none;
}

.data-list__desc--wrapper {
    height: inherit;
    display: flex;
    text-align: center;
    align-items: center;
    font-size: var(--text-size-xxs);
    color: var(--text-general);
    padding: 1rem;
}

/* stylelint-disable-next-line plugin/selector-bem-pattern */

.ReactVirtualized__List {
    outline: 0;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-data-table */

.dc-data-table {
    display: flex;
    flex-direction: column;
}

/** @define table */

.table {
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: default;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
}

.table__cell {
    padding: 0.75em;
    display: flex;
    align-items: center;
}

.table__cell:first-child {
    padding-left: 0;
}

.table__cell:last-child {
    padding-right: 0;
}

.table__row {
    display: grid;
    grid-auto-rows: max-content;
    padding: 0 1.6em;
    box-sizing: border-box;
    text-decoration: none;
    position: relative;
}

.table__row,
.table__row:active,
.table__row:visited {
    color: var(--text-general);
}

.table__row--preloader {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    max-height: 64px;
    width: 100%;
}

.table__row--icon {
    margin-left: 1rem;
}

.table__head {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px;
}

.table__head .table__row {
    color: var(--text-prominent);
    height: 100%;
    border-bottom: none;
}

.table__body {
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    flex-basis: 0;
}

.table__body .table__row-link:hover {
    background-color: var(--state-hover);
    cursor: pointer;
}

.table__body .table__row:last-child {
    border-bottom: none;
}

.table__head,
.table__foot {
    font-weight: 500;
    white-space: nowrap;
}

.table__foot {
    border-top: 2px solid var(--general-section-1);
}

.table__foot .table__row {
    color: var(--text-general);
    border-bottom: none;
}

/*------------------------------------*
 *  # Constants
 *------------------------------------*/

/* stylelint-disable color-no-hex */

/* COLOR PALETTE */

/* colors */

/* status colors */

/* alpha colors */

/* gradient colors */

/* Preserve legacy variables */

/* Primary */

/* stylelint-enable color-no-hex */

/* Wallet gradient background */

/* App Cards gradient background */

/* Wallets */

/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

/*
 * SASS interpolation
 */

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */

/*
 * Range Slider Thumb styling is set here
 */

/*
 * SVG icons colors
 */

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */

/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */

/*
    Constants
*/

/*
    Variables
*/

/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */

/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/

/**
 * Define Breakpoints here.
 */

/** @define dc-dialog */

.dc-dialog {
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    flex-direction: column;
    z-index: 999;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.dc-dialog__wrapper {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--overlay-outside-dialog);
}

.dc-dialog__wrapper--enter,
.dc-dialog__wrapper--exit {
    opacity: 0;
}

.dc-dialog__wrapper--enter .dc-dialog__dialog,
.dc-dialog__wrapper--exit .dc-dialog__dialog {
    transform: translate3d(0, 50px, 0);
    opacity: 0;
}

.dc-dialog__wrapper--enter-done {
    opacity: 1;
}

.dc-dialog__wrapper--enter-done .dc-dialog__dialog {
    transform: translate3d(0, 0, 0);
    opacity: 1;
}

.dc-dialog__wrapper--has-portal {
    background-color: transparent;
}

.dc-dialog__dialog {
    max-width: 560px;
    max-height: 338px;
    min-width: 440px;
    min-height: 176px;
    margin-top: -48px;
    padding: 2.4rem;
    border-radius: 8px;
    box-sizing: border-box;
    display: flex;
    justify-content: space-around;
    flex-direction: column;
    align-items: center;
    box-shadow: 0 2px 8px 0 var(--shadow-menu);
    background-color: var(--general-main-2);
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
}

.dc-dialog__header-wrapper {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.dc-dialog__header-wrapper--end {
    justify-content: flex-end;
}

.dc-dialog__header--title {
    align-self: flex-start;
}

.dc-dialog__header--close {
    cursor: pointer;
}

.dc-dialog__content {
    align-self: flex-start;
    margin-bottom: 2.4rem;
    max-width: calc(440px - 4.8rem);
    width: 100%;
    /* postcss-bem-linter: ignore */
}

.dc-dialog__content .dc-input__label {
    background-color: var(--general-main-2);
}

.dc-dialog__content--centered {
    align-self: center;
}

.dc-dialog__footer {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 100%;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-dialog__footer {
        flex-wrap: wrap;
        align-items: flex-start;
    }
}

.dc-dialog__button {
    margin-left: 0.8rem;
}

@media (min-width: 320px) and (max-width: 767px) {
    .dc-dialog__button:not(:last-child) {
        margin-bottom: 1rem;
    }
}

@media screen and (max-width: 560px) {
    .dc-dialog__dialog {
        min-width: auto;
    }
    .dc-dialog__dialog--has-margin {
        min-width: 0;
        min-width: initial;
        width: calc(100vw - 4.8rem);
    }
}